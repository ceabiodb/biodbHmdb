// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convolve_cpp
Rcpp::NumericVector convolve_cpp(const Rcpp::NumericVector& a, const Rcpp::NumericVector& b);
RcppExport SEXP _biodbHmdb_convolve_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// extractXmlEntries
Rcpp::StringVector extractXmlEntries(const std::string& xmlFile, const std::string& extractDir);
RcppExport SEXP _biodbHmdb_extractXmlEntries(SEXP xmlFileSEXP, SEXP extractDirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type xmlFile(xmlFileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type extractDir(extractDirSEXP);
    rcpp_result_gen = Rcpp::wrap(extractXmlEntries(xmlFile, extractDir));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_biodbHmdb_convolve_cpp", (DL_FUNC) &_biodbHmdb_convolve_cpp, 2},
    {"_biodbHmdb_extractXmlEntries", (DL_FUNC) &_biodbHmdb_extractXmlEntries, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_biodbHmdb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
